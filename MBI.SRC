; .\MBI.SRC generated from: MBI.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE MBI.c ROM(COMPACT) OPTIMIZE(9,SPEED) REGFILE(.\DisplayRoulette.ORC) BROWSE DEBUG OBJECTEXTEND TABS(2) SRC(.\MBI.SRC)

$NOMOD51

NAME	MBI

CCF2	BIT	0D8H.2
TB80	BIT	098H.3
IDA0	DATA	096H
SPI0CKR	DATA	0A2H
Dclk	BIT	080H.2
CCF3	BIT	0D8H.3
IDA1	DATA	0F4H
P0	DATA	080H
SPIEN	BIT	0F8H.0
CCF4	BIT	0D8H.4
P1	DATA	090H
CCF5	BIT	0D8H.5
P2	DATA	0A0H
ADC0CF	DATA	0BCH
AC	BIT	0D0H.6
PCA0	DATA	0F9H
EIE1	DATA	0E6H
RTC0KEY	DATA	0AEH
EA	BIT	0A8H.7
MCE0	BIT	098H.5
EIE2	DATA	0E7H
PSCTL	DATA	08FH
CF	BIT	0D8H.7
IT01CF	DATA	0E4H
ADC0CN	DATA	0E8H
P0MDOUT	DATA	0A4H
P1MDOUT	DATA	0A5H
TMR2RLH	DATA	0CBH
IE	DATA	0A8H
P2MDOUT	DATA	0A6H
TMR3RLH	DATA	093H
EIP1	DATA	0F6H
TXBMT	BIT	0F8H.1
EIP2	DATA	0F7H
IDA0CN	DATA	0B9H
PCA0CPH0	DATA	0FCH
TMR2RLL	DATA	0CAH
IDA1CN	DATA	0B5H
PCA0CPH1	DATA	0EAH
TMR3RLL	DATA	092H
DP	DATA	082H
PCA0CPH2	DATA	0ECH
CR	BIT	0D8H.6
T2SPLIT	BIT	0C8H.3
TF2H	BIT	0C8H.7
ADC0GT	DATA	0C3H
PCA0CPH3	DATA	0EEH
REN0	BIT	098H.4
PCA0CPH4	DATA	0FEH
PCA0CPL0	DATA	0FBH
PCA0CPL1	DATA	0E9H
PCA0CPM0	DATA	0DAH
PCA0MD	DATA	0D9H
PCA0CN	DATA	0D8H
PCA0CPH5	DATA	0D3H
PCA0CPL2	DATA	0EBH
PCA0CPM1	DATA	0DBH
TF2L	BIT	0C8H.6
PCA0CPL3	DATA	0EDH
PCA0CPM2	DATA	0DCH
ADC0TK	DATA	0BAH
IP	DATA	0B8H
ARBLOST	BIT	0C0H.2
ADC0LT	DATA	0C5H
PCA0CPL4	DATA	0FDH
PCA0CPM3	DATA	0DDH
PCA0CPM4	DATA	0DEH
PCA0CPL5	DATA	0D2H
CRC0CN	DATA	084H
CY	BIT	0D0H.7
SI	BIT	0C0H.0
PCA0CPM5	DATA	0CEH
CE24L01	BIT	090H.3
XBR0	DATA	0E1H
SMB0CF	DATA	0C1H
PFE0CN	DATA	0E3H
XBR1	DATA	0E2H
EMI0CN	DATA	0AAH
ADC0MX	DATA	0BBH
REF0CN	DATA	0D1H
REG0CN	DATA	0C9H
CRC0IN	DATA	085H
AD0INT	BIT	0E8H.5
ONESHOT	DATA	0AFH
SP	DATA	081H
TF2CEN	BIT	0C8H.4
OV	BIT	0D0H.2
SMB0CN	DATA	0C0H
BURSTEN	BIT	0E8H.6
TMR2	DATA	0CCH
MODF	BIT	0F8H.5
TMR3	DATA	094H
P0ODEN	DATA	0B0H
S0MODE	BIT	098H.7
VDM0CN	DATA	0FFH
P0MDIN	DATA	0F1H
CPT0MD	DATA	09DH
CPT0CN	DATA	09BH
P1MDIN	DATA	0F2H
CPT1MD	DATA	09CH
CPT1CN	DATA	09AH
P2MDIN	DATA	0F3H
TF2LEN	BIT	0C8H.5
P0MASK	DATA	0C7H
SPI0CN	DATA	0F8H
P1MASK	DATA	0BFH
PCON	DATA	087H
SPIF	BIT	0F8H.7
T2RCLK	BIT	0C8H.1
TMOD	DATA	089H
TCON	DATA	088H
led	BIT	090H.2
WCOL	BIT	0F8H.6
CRC0FLIP	DATA	0DFH
NSSMD0	BIT	0F8H.2
NSSMD1	BIT	0F8H.3
TMR2CN	DATA	0C8H
P0SKIP	DATA	0D4H
TMR3CN	DATA	091H
T2XCLK	BIT	0C8H.0
P1SKIP	DATA	0D5H
P2SKIP	DATA	0D6H
IE0	BIT	088H.1
CPT0MX	DATA	09FH
IE1	BIT	088H.3
OSCICL	DATA	0B3H
CPT1MX	DATA	09EH
CLKSEL	DATA	0A9H
sdi	BIT	080H.6
B	DATA	0F0H
ADC0H	DATA	0BEH
OSCICN	DATA	0B2H
TMR2RL	DATA	0CAH
ADC0L	DATA	0BDH
TMR3RL	DATA	092H
sdo	BIT	080H.3
ACC	DATA	0E0H
IDA0H	DATA	097H
ES0	BIT	0A8H.4
IDA1H	DATA	0F5H
AD0EN	BIT	0E8H.7
ET0	BIT	0A8H.1
PCA0CP0	DATA	0FBH
ET1	BIT	0A8H.3
TF0	BIT	088H.5
PCA0CP1	DATA	0E9H
CLKMUL	DATA	0ABH
mbiLE	BIT	0A0H.4
ET2	BIT	0A8H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
PCA0CP2	DATA	0EBH
IDA0L	DATA	096H
PCA0CP3	DATA	0EDH
IDA1L	DATA	0F4H
TH0	DATA	08CH
EX0	BIT	0A8H.0
TI0	BIT	098H.1
IT0	BIT	088H.0
PCA0CP4	DATA	0FDH
PCA0H	DATA	0FAH
TH1	DATA	08DH
MASTER	BIT	0C0H.7
EX1	BIT	0A8H.2
IT1	BIT	088H.2
PCA0CP5	DATA	0D2H
P	BIT	0D0H.0
ACK	BIT	0C0H.1
OSCXCN	DATA	0B1H
TL0	DATA	08AH
PCA0L	DATA	0F9H
TL1	DATA	08BH
TXMODE	BIT	0C0H.6
PS0	BIT	0B8H.4
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
ADC0GTH	DATA	0C4H
DPL	DATA	082H
ADC0GTL	DATA	0C3H
SBUF0	DATA	099H
ESPI0	BIT	0A8H.6
ADC0LTH	DATA	0C6H
RSTSRC	DATA	0EFH
P0MAT	DATA	0D7H
CRC0DAT	DATA	086H
P1MAT	DATA	0CFH
SCON0	DATA	098H
ADC0LTL	DATA	0C5H
STA	BIT	0C0H.5
PSPI0	BIT	0B8H.6
SMB0DAT	DATA	0C2H
TMR2H	DATA	0CDH
SPI0CFG	DATA	0A1H
TMR3H	DATA	095H
CKCON	DATA	08EH
RXOVRN	BIT	0F8H.4
TMR2L	DATA	0CCH
RTC0ADR	DATA	0ACH
ACKRQ	BIT	0C0H.3
TMR3L	DATA	094H
AD0LJST	BIT	0E8H.2
RTC0DAT	DATA	0ADH
sel0	BIT	0A0H.5
F0	BIT	0D0H.5
FLSCL	DATA	0B6H
sel1	BIT	0A0H.6
AD0CM0	BIT	0E8H.0
F1	BIT	0D0H.1
STO	BIT	0C0H.4
AD0CM1	BIT	0E8H.1
SPI0DAT	DATA	0A3H
ADC0	DATA	0BDH
CSN24L01	BIT	090H.6
AD0WINT	BIT	0E8H.3
AD0BUSY	BIT	0E8H.4
PSW	DATA	0D0H
CCF0	BIT	0D8H.0
RB80	BIT	098H.2
FLKEY	DATA	0B7H
CCF1	BIT	0D8H.1
?PR?address?MBI      SEGMENT CODE INBLOCK 
?DT?address?MBI      SEGMENT DATA OVERLAYABLE 
?PR?_ptr?MBI         SEGMENT CODE INBLOCK 
?DT?_ptr?MBI         SEGMENT DATA OVERLAYABLE 
?PR?_gotoxy?MBI      SEGMENT CODE INBLOCK 
?PR?_SetPoint?MBI    SEGMENT CODE INBLOCK 
?BI?_SetPoint?MBI    SEGMENT BIT OVERLAYABLE 
?CO?MBI              SEGMENT CODE 
?DT?MBI              SEGMENT DATA 
?PR?MBI              SEGMENT CODE INBLOCK 
	EXTRN	IDATA (my_data)
	EXTRN	CODE (?C?IMUL)
	PUBLIC	complicate
	PUBLIC	screen
	PUBLIC	numbers
	PUBLIC	cs2
	PUBLIC	cs1
	PUBLIC	?_SetPoint?BIT
	PUBLIC	_SetPoint
	PUBLIC	_gotoxy
	PUBLIC	_ptr
	PUBLIC	address

	XSEG  AT  0E0H
         screen:   DS   576

	RSEG  ?BI?_SetPoint?MBI
?_SetPoint?BIT:
         sr?349:   DBIT   1

	RSEG  ?DT?_ptr?MBI
?_ptr?BYTE:
          k?145:   DS   1

	RSEG  ?DT?address?MBI
?address?BYTE:
       chip?040:   DS   2

	RSEG  ?DT?MBI
     complicate:   DS   5

	RSEG  ?CO?MBI
cs1:
	DB	001H
	DB	000H
	DB	00DH
	DB	00CH
	DB	00BH
	DB	003H
	DB	004H
	DB	008H

cs2:
	DB	007H
	DB	006H
	DB	005H
	DB	009H
	DB	00AH
	DB	002H
	DB	00FH
	DB	00EH

numbers:
	DB	0FCH
	DB	060H
	DB	0DAH
	DB	0F2H
	DB	066H
	DB	0B6H
	DB	0BEH
	DB	0E0H
	DB	0FEH
	DB	0F6H
	DB	002H
	DB	000H
	DB	000H
	DB	000H
	DB	000H
	DB  000H


; #include "display_slot.h"
; #include <intrins.h>
; 
; 
; 
; 
; #define NO_LACH            -1
; 
; #define DATA_LACH          1
; #define GLOBAL_LACH        3
; #define READ_CONFIGURATION 5
; #define EABLE_ERRORDETECT  7
; #define READ_ERRORSTATUS   9
; #define WRITE_CONFIG       11
; #define RESET_PWM          13
; 
; 
; 
; unsigned char xdata screen[NUM_OF_MBI*NUM_OF_COLUMNS*16] _at_ 0x100-0x20;
; 
; 
;  
; //b1,a1,f2,f1,g1,c2,b2,a2,D1,d2,e2,e1,d1,c1,D2,g2
; //0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
;  
; const unsigned char code cs1[8]={ 1, 0,13,12,11, 3, 4, 8};    
; const unsigned char code cs2[8]={ 7,  6, 5, 9,10, 2,15,14};
; 
; 
; struct caddr {
;                 unsigned int address;
; 								unsigned char column;
; 								unsigned char row;
; 								unsigned char segment;
; 							} complicate;
; 
; 

	RSEG  ?PR?MBI
Com0013:
L?0020:
	USING	0
	MOV  	A,#LOW (screen)
	ADD  	A,complicate+01H
	MOV  	DPL,A
	MOV  	A,#HIGH (screen)
	ADDC 	A,complicate
	MOV  	DPH,A
	RET  	
; END OF Com0013

; void address()

	RSEG  ?PR?address?MBI
address:
	USING	0
			; SOURCE LINE # 38
;---- Variable 'seg?042' assigned to Register 'R2/R3' ----
;  {
			; SOURCE LINE # 39
;    unsigned int chip,col,seg;
; 						   
;    chip = complicate.row;
			; SOURCE LINE # 42
	MOV  	chip?040,#00H
	MOV  	chip?040+01H,complicate+03H
;    col=	complicate.column/2; 
			; SOURCE LINE # 43
	MOV  	A,complicate+02H
	CLR  	C
	RRC  	A
	MOV  	R7,A
	MOV  	R6,#00H
;---- Variable 'col?041' assigned to Register 'R6/R7' ----
;    if ((complicate.column&1)==0)	
			; SOURCE LINE # 44
	MOV  	A,complicate+02H
	JB   	ACC.0,?C0001
;     seg=cs1[complicate.segment];
			; SOURCE LINE # 45
	MOV  	A,complicate+04H
	MOV  	DPTR,#cs1
	SJMP 	?C0018
?C0001:
;    else
;     seg=cs2[complicate.segment];		 
			; SOURCE LINE # 47
	MOV  	A,complicate+04H
	MOV  	DPTR,#cs2
?C0018:
	MOVC 	A,@A+DPTR
	MOV  	R2,#00H
	MOV  	R3,A
?C0002:
;    complicate.address=NUM_OF_MBI*(16*col+seg)+chip;
			; SOURCE LINE # 48
	MOV  	A,R7
	SWAP 	A
	MOV  	R0,A
	ANL  	A,#0FH
	XCH  	A,R0
	XRL  	A,R0
	MOV  	R7,A
	MOV  	A,R6
	SWAP 	A
	ANL  	A,#0F0H
	ORL  	A,R0
	MOV  	R6,A
	MOV  	A,R7
	ADD  	A,R3
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,R2
	MOV  	R6,A
	MOV  	R4,#00H
	MOV  	R5,#0CH
	LCALL	?C?IMUL
	MOV  	A,chip?040+01H
	ADD  	A,R7
	MOV  	complicate+01H,A
	MOV  	A,chip?040
	ADDC 	A,R6
	MOV  	complicate,A
; }
			; SOURCE LINE # 49
	RET  	
; END OF address

;  
; 
;                                      //  0    1    2    3    4    5    6    7    8    9    - 
; const unsigned char code numbers[16]= {0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xf6,0x02,0x00,0x00,0x00,0x00};
; 
; 
; extern union my_data idata my_data;
; 
; void ptr(char c) //c ->PBBXNNNN POINT,BRIGHTNESS,NUMBER

	RSEG  ?PR?_ptr?MBI
_ptr:
	USING	0
			; SOURCE LINE # 58
;---- Variable 'c?143' assigned to Register 'R7' ----
;  {
			; SOURCE LINE # 59
; 	  unsigned char d,k;
;     d=numbers[c&0x0f];
			; SOURCE LINE # 61
	MOV  	A,R7
	ANL  	A,#0FH
	MOV  	R5,A
	RLC  	A
	SUBB 	A,ACC
	MOV  	R4,A
	MOV  	A,#LOW (numbers)
	ADD  	A,R5
	MOV  	DPL,A
	MOV  	A,#HIGH (numbers)
	ADDC 	A,R4
	MOV  	DPH,A
	CLR  	A
	MOVC 	A,@A+DPTR
;---- Variable 'd?144' assigned to Register 'R1' ----
	MOV  	R1,A
; 	  if (c&0x80) 
			; SOURCE LINE # 62
	MOV  	A,R7
	JNB  	ACC.7,?C0004
; 			d|=0x1; //add a point
			; SOURCE LINE # 63
	ORL  	AR1,#01H
?C0004:
; 		k=my_data.dat.bright[(c>>4)&0x3];
			; SOURCE LINE # 64
	MOV  	A,R7
	MOV  	R0,#04H
?C0017:
	MOV  	C,ACC.7
	RRC  	A
	DJNZ 	R0,?C0017
	ANL  	A,#03H
	ADD  	A,#LOW (my_data)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	k?145,A
; 	  for (complicate.segment=0;complicate.segment<8;complicate.segment++)
			; SOURCE LINE # 65
	CLR  	A
	MOV  	complicate+04H,A
?C0005:
; 	   {			 
			; SOURCE LINE # 66
;  			 address();
			; SOURCE LINE # 67
	LCALL	address
; 			 if ((d&0x80)!=0)
			; SOURCE LINE # 68
	MOV  	A,R1
	JNB  	ACC.7,?C0008
; 				 screen[complicate.address]=k;
			; SOURCE LINE # 69
	LCALL	L?0020
	MOV  	A,k?145
	MOVX 	@DPTR,A
	SJMP 	?C0009
?C0008:
; 			 else
; 				 screen[complicate.address]=0;
			; SOURCE LINE # 71
	LCALL	L?0020
	CLR  	A
	MOVX 	@DPTR,A
?C0009:
; 			 d<<=1;
			; SOURCE LINE # 72
	MOV  	A,R1
	ADD  	A,ACC
	MOV  	R1,A
; 	   }
			; SOURCE LINE # 73
	INC  	complicate+04H
	MOV  	A,complicate+04H
	CLR  	C
	SUBB 	A,#08H
	JC   	?C0005
?C0006:
; 		 complicate.column++;
			; SOURCE LINE # 74
	INC  	complicate+02H
; 	   if (complicate.column>=6)
			; SOURCE LINE # 75
	MOV  	A,complicate+02H
	CLR  	C
	SUBB 	A,#06H
	JC   	?C0012
; 		 {
			; SOURCE LINE # 76
; 			 complicate.column-=6;
			; SOURCE LINE # 77
	MOV  	A,#0FAH
	ADD  	A,complicate+02H
	MOV  	complicate+02H,A
; 			 if (++complicate.row>=NUM_OF_MBI)
			; SOURCE LINE # 78
	INC  	complicate+03H
	MOV  	A,complicate+03H
	CLR  	C
	SUBB 	A,#0CH
	JC   	?C0012
; 				 complicate.row=0;
			; SOURCE LINE # 79
	CLR  	A
	MOV  	complicate+03H,A
; 				  
; 		 }
			; SOURCE LINE # 81
; 		 return;
;  }                       
			; SOURCE LINE # 83
?C0012:
	RET  	
; END OF _ptr

; 
; void gotoxy(unsigned char x,unsigned char y)

	RSEG  ?PR?_gotoxy?MBI
_gotoxy:
			; SOURCE LINE # 85
;---- Variable 'y?247' assigned to Register 'R5' ----
;---- Variable 'x?246' assigned to Register 'R7' ----
;  {
			; SOURCE LINE # 86
; 	 complicate.column=x;
			; SOURCE LINE # 87
	MOV  	complicate+02H,R7
; 	 complicate.row=y;
			; SOURCE LINE # 88
	MOV  	complicate+03H,R5
;  }
			; SOURCE LINE # 89
	RET  	
; END OF _gotoxy

;  
; void SetPoint(unsigned char b,bit sr) //Set the two led's for the clock

	RSEG  ?PR?_SetPoint?MBI
_SetPoint:
	USING	0
			; SOURCE LINE # 91
;---- Variable 'b?348' assigned to Register 'R7' ----
;  {
			; SOURCE LINE # 92
; 	 if (sr)
			; SOURCE LINE # 93
	JNB  	sr?349,?C0014
; 	  {
			; SOURCE LINE # 94
; 		 screen[16*NUM_OF_MBI+15*NUM_OF_MBI+1]=my_data.dat.bright[b]; //set G2
			; SOURCE LINE # 95
	MOV  	A,#LOW (my_data)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	DPTR,#screen+0175H
	MOVX 	@DPTR,A
; 		 screen[16*NUM_OF_MBI+ 7*NUM_OF_MBI+1]=my_data.dat.bright[b]; //set A2		 
			; SOURCE LINE # 96
	MOV  	A,#LOW (my_data)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	DPTR,#screen+0115H
	MOVX 	@DPTR,A
; 	  }
			; SOURCE LINE # 97
	RET  	
?C0014:
; 	 else
; 	  {
			; SOURCE LINE # 99
; 		 screen[16*NUM_OF_MBI+15*NUM_OF_MBI+1]=0; //set G2
			; SOURCE LINE # 100
	CLR  	A
	MOV  	DPTR,#screen+0175H
	MOVX 	@DPTR,A
; 		 screen[16*NUM_OF_MBI+ 7*NUM_OF_MBI+1]=0; //set A2		 
			; SOURCE LINE # 101
	MOV  	DPTR,#screen+0115H
	MOVX 	@DPTR,A
; 	  }		 
			; SOURCE LINE # 102
;  }
			; SOURCE LINE # 103
?C0016:
	RET  	
; END OF _SetPoint

	END
